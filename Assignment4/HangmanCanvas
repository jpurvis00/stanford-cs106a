/*
 * File: HangmanCanvas.java
 * ------------------------
 * This file keeps track of the Hangman display.
 */

import acm.graphics.*;

public class HangmanCanvas extends GCanvas {

/** Resets the display so that only the scaffold appears */
	public void reset() {
		double canvasWidth = getWidth();
				
		//Display rope
		line = new GLine(canvasWidth / 2, 50, canvasWidth / 2, 50 + ROPE_LENGTH);
		add(line);
		
		//Display beam
		line = new GLine(canvasWidth / 2 - BEAM_LENGTH, 50, canvasWidth / 2, 50);
		add(line);
		
		//Display scaffolding
		line = new GLine(canvasWidth / 2 - BEAM_LENGTH, 50, canvasWidth / 2 - BEAM_LENGTH, 50 + SCAFFOLD_HEIGHT);
		add(line);
	}

/**
 * Updates the word on the screen to correspond to the current
 * state of the game.  The argument string shows what letters have
 * been guessed so far; unguessed letters are indicated by hyphens.
 */
	public void displayWord(String word) {
		label = new GLabel(word, 50, 350);
		label.setFont("SansSerif-22");
		
		/* Must remove the label that shows the word with correct chars before adding it again.
		 * If we don't do this we just keep displaying labels over labels.
		 */
		if(getElementAt(50, 350) != null) {
			remove(getElementAt(50, 350));
		}
		add(label);
	}

/**
 * Updates the display to correspond to an incorrect guess by the
 * user.  Calling this method causes the next body part to appear
 * on the scaffold and adds the letter to the list of incorrect
 * guesses that appears at the bottom of the window.
 */
	public void noteIncorrectGuess(char letter) {
		double canvasWidth = getWidth();
								
		missedLetters += letter;
		label = new GLabel(missedLetters, 50, 400);
		add(label);
		
		missedChances = missedLetters.length();
		
		switch(missedChances) {
			case 1:
				//Display head
				head = new GOval(canvasWidth / 2 - HEAD_RADIUS / 2, 50 + ROPE_LENGTH, HEAD_RADIUS, HEAD_RADIUS);
				add(head);
				break;
			
			case 2: 
				//Display body
				line = new GLine(canvasWidth / 2, 50 + ROPE_LENGTH + HEAD_RADIUS, canvasWidth / 2, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH);
				add(line);
				break;
				
			case 3:
				//Display left arm
				line = new GLine(canvasWidth / 2 - UPPER_ARM_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD, canvasWidth / 2, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD);
				add(line);
				line = new GLine(canvasWidth / 2 - UPPER_ARM_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD, canvasWidth / 2 - UPPER_ARM_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD + LOWER_ARM_LENGTH);
				add(line);
				break;
				
			case 4:
				//Display right arm
				line = new GLine(canvasWidth / 2, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD, canvasWidth / 2 + UPPER_ARM_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD);
				add(line);
				line = new GLine(canvasWidth / 2 + UPPER_ARM_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD, canvasWidth / 2 + UPPER_ARM_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD + LOWER_ARM_LENGTH);
				add(line);
				break;
				
			case 5:
				//Display left leg
				line = new GLine(canvasWidth / 2 - HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH, canvasWidth / 2, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH);
				add(line);
				line = new GLine(canvasWidth / 2 - HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH, canvasWidth / 2 - HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH);
				add(line);
				break;
				
			case 6:
				//Display right leg
				line = new GLine(canvasWidth / 2, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH, canvasWidth / 2 + HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH);
				add(line);
				line = new GLine(canvasWidth / 2 + HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH, canvasWidth / 2 + HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH);
				add(line);
				break;
				
			case 7:
				//Display left foot
				line = new GLine(canvasWidth / 2 - HIP_WIDTH - FOOT_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH, canvasWidth / 2 - HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH);
				add(line);
				break;
					
			case 8:
				//Display right foot
				line = new GLine(canvasWidth / 2 + HIP_WIDTH + FOOT_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH, canvasWidth / 2 + HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH);
				add(line);
				break;
		}
	}

/* Constants for the simple version of the picture (in pixels) */
	private static final int SCAFFOLD_HEIGHT = 187;
	private static final int BEAM_LENGTH = 75;
	private static final int ROPE_LENGTH = 10;
	private static final int HEAD_RADIUS = 19;
	private static final int BODY_LENGTH = 75;
	private static final int ARM_OFFSET_FROM_HEAD = 15;
	private static final int UPPER_ARM_LENGTH = 39;
	private static final int LOWER_ARM_LENGTH = 23;
	private static final int HIP_WIDTH = 19;
	private static final int LEG_LENGTH = 57;
	private static final int FOOT_LENGTH = 15;

	/* Private obj variables */
	private GLine line;
	private GOval head;
	private GLabel label;
	
	/* Private instance variables */
	private String missedLetters = "";
	private int missedChances = 0;
}

		double canvasHeight = getHeight();
						
		missedLetters += letter;
		label = new GLabel(missedLetters, 50, 400);
		add(label);
		
		missedChances = missedLetters.length();
		
		switch(missedChances) {
			case 1:
				//Display head
				head = new GOval(canvasWidth / 2 - HEAD_RADIUS / 2, 50 + ROPE_LENGTH, HEAD_RADIUS, HEAD_RADIUS);
				add(head);
				break;
			
			case 2: 
				//Display body
				line = new GLine(canvasWidth / 2, 50 + ROPE_LENGTH + HEAD_RADIUS, canvasWidth / 2, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH);
				add(line);
				break;
				
			case 3:
				//Display left arm
				line = new GLine(canvasWidth / 2 - UPPER_ARM_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD, canvasWidth / 2, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD);
				add(line);
				line = new GLine(canvasWidth / 2 - UPPER_ARM_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD, canvasWidth / 2 - UPPER_ARM_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD + LOWER_ARM_LENGTH);
				add(line);
				break;
				
			case 4:
				//Display right arm
				line = new GLine(canvasWidth / 2, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD, canvasWidth / 2 + UPPER_ARM_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD);
				add(line);
				line = new GLine(canvasWidth / 2 + UPPER_ARM_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD, canvasWidth / 2 + UPPER_ARM_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + ARM_OFFSET_FROM_HEAD + LOWER_ARM_LENGTH);
				add(line);
				break;
				
			case 5:
				//Display left leg
				line = new GLine(canvasWidth / 2 - HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH, canvasWidth / 2, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH);
				add(line);
				line = new GLine(canvasWidth / 2 - HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH, canvasWidth / 2 - HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH);
				add(line);
				break;
				
			case 6:
				//Display right leg
				line = new GLine(canvasWidth / 2, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH, canvasWidth / 2 + HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH);
				add(line);
				line = new GLine(canvasWidth / 2 + HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH, canvasWidth / 2 + HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH);
				add(line);
				break;
				
			case 7:
				//Display left foot
				line = new GLine(canvasWidth / 2 - HIP_WIDTH - FOOT_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH, canvasWidth / 2 - HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH);
				add(line);
				break;
					
			case 8:
				//Display right foot
				line = new GLine(canvasWidth / 2 + HIP_WIDTH + FOOT_LENGTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH, canvasWidth / 2 + HIP_WIDTH, 50 + ROPE_LENGTH + HEAD_RADIUS + BODY_LENGTH + LEG_LENGTH);
				add(line);
				break;
		}
	}

/* Constants for the simple version of the picture (in pixels) */
	private static final int SCAFFOLD_HEIGHT = 187;
	private static final int BEAM_LENGTH = 75;
	private static final int ROPE_LENGTH = 10;
	private static final int HEAD_RADIUS = 19;
	private static final int BODY_LENGTH = 75;
	private static final int ARM_OFFSET_FROM_HEAD = 15;
	private static final int UPPER_ARM_LENGTH = 39;
	private static final int LOWER_ARM_LENGTH = 23;
	private static final int HIP_WIDTH = 19;
	private static final int LEG_LENGTH = 57;
	private static final int FOOT_LENGTH = 15;

	/* Private obj variable */
	private GLine line;
	private GOval head;
	private GLabel label;
	
	private String missedLetters = "";
	private int missedChances = 0;
}
